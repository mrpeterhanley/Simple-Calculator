{"version":3,"sources":["calculator.js","index.js"],"names":["Calculator","calculator","document","querySelector","keys","display","addEventListener","e","target","matches","buttonClicked","key","textContent","dataset","firstValue","operator","previousKeyType","action","keyContent","displayedNum","numberInput","decimalInput","operatorInput","clearInput","equalsInput","includes","secondValue","calcValue","calculate","n1","n2","firstNum","parseFloat","secondNum","Error","myCalculator","build"],"mappings":"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","file":"Simple-Calculator.41585282.js","sourceRoot":"..","sourcesContent":["export default class Calculator {\r\n  constructor() {\r\n    this.calculator = document.querySelector(\".calculator\");\r\n    this.keys = this.calculator.querySelector(\".calculator__keys\");\r\n    this.display = this.calculator.querySelector(\".calculator__display\");\r\n  }\r\n\r\n  build() {\r\n    // add an event listener to the calculator element\r\n    this.keys.addEventListener(\"click\", (e) => {\r\n      if (e.target.matches(\"button\")) {\r\n        // a calculator button was clicked. Perform action\r\n        this.buttonClicked(e.target);\r\n      }\r\n    });\r\n  }\r\n\r\n  clearInput(key) {\r\n    if (key.textContent === \"AC\") {\r\n      // \"AC\" was clicked, clear all stored values\r\n      this.calculator.dataset.firstValue = \"\";\r\n      this.calculator.dataset.operator = \"\";\r\n      this.calculator.dataset.previousKeyType = \"\";\r\n    } else {\r\n      // change \"CE\" (clear current) to \"AC\" (clear all stored)\r\n      key.textContent = \"AC\";\r\n    }\r\n    // clear the current display (\"CE\")\r\n    this.display.textContent = 0;\r\n    this.calculator.dataset.previousKeyType = \"clear\";\r\n  }\r\n\r\n  buttonClicked(target) {\r\n    // get the button clicked\r\n    const key = target;\r\n\r\n    // get the data-action value of the button (if there is one: clear / divide / multiply / subtract / add / calculate)\r\n    const action = key.dataset.action;\r\n\r\n    // get the value of the button clicked\r\n    const keyContent = key.textContent;\r\n\r\n    // get the value of the display element\r\n    const displayedNum = this.display.textContent;\r\n\r\n    // get the type of the previous button clicked\r\n    const previousKeyType = this.calculator.dataset.previousKeyType;\r\n\r\n    // perform action if button clicked is a numeral 0 - 9\r\n    if (!action) {\r\n      this.numberInput(keyContent, displayedNum, previousKeyType);\r\n    }\r\n\r\n    // perform action if button clicked is a decimal point\r\n    if (action === \"decimal\") {\r\n      this.decimalInput(displayedNum, previousKeyType);\r\n    }\r\n\r\n    // perform action if button clicked is an operator (plus / minus / multiply / divide)\r\n    if (\r\n      action === \"add\" ||\r\n      action === \"subtract\" ||\r\n      action === \"multiply\" ||\r\n      action === \"divide\"\r\n    ) {\r\n      this.operatorInput(displayedNum, previousKeyType, action);\r\n    }\r\n\r\n    // perform action if button clicked is clear\r\n    if (action === \"clear\") {\r\n      this.clearInput(key);\r\n    }\r\n\r\n    // if button clicked was not clear, change \"AC\" to \"CE\" (\"clear all to clear current\")\r\n    if (action !== \"clear\") {\r\n      const clearButton = this.calculator.querySelector(\"[data-action=clear]\");\r\n      clearButton.textContent = \"CE\";\r\n    }\r\n\r\n    // perform calculation if button clicked is equals\r\n    if (action === \"calculate\") {\r\n      this.equalsInput(displayedNum, previousKeyType);\r\n    }\r\n  }\r\n\r\n  // function that deals with the click of a number button\r\n  numberInput(keyContent, displayedNum, previousKeyType) {\r\n    if (\r\n      displayedNum === \"0\" ||\r\n      previousKeyType === \"operator\" ||\r\n      previousKeyType === \"calculate\"\r\n    ) {\r\n      // display button value directly on screen if it is the first number (i.e. display is zero)\r\n      // or the previous button clicked was an operator or equals\r\n      this.display.textContent = keyContent;\r\n    } else {\r\n      // concatenate the button value onto the displayed number string if previous button clicked was also a number\r\n      this.display.textContent = displayedNum + keyContent;\r\n    }\r\n    this.calculator.dataset.previousKeyType = \"number\";\r\n  }\r\n\r\n  // function that deals with the click of the decimal button\r\n  decimalInput(displayedNum, previousKeyType) {\r\n    if (!displayedNum.includes(\".\")) {\r\n      // only add a decimal point to the display string if it hasn't been added already\r\n      this.display.textContent = displayedNum + \".\";\r\n    } else if (\r\n      previousKeyType === \"operator\" ||\r\n      previousKeyType === \"calculate\"\r\n    ) {\r\n      // display \"0.\" if the previous button clicked wasn't a number (e.g. operator button)\r\n      this.display.textContent = \"0.\";\r\n    }\r\n    this.calculator.dataset.previousKeyType = \"decimal\";\r\n  }\r\n\r\n  // function that deals with the click of an operator button (+/-/x/รท).\r\n  operatorInput(displayedNum, previousKeyType, action) {\r\n    const firstValue = this.calculator.dataset.firstValue;\r\n    const operator = this.calculator.dataset.operator;\r\n    const secondValue = displayedNum;\r\n\r\n    if (\r\n      firstValue &&\r\n      operator &&\r\n      previousKeyType !== \"operator\" &&\r\n      previousKeyType !== \"calculate\"\r\n    ) {\r\n      // perform a calculation if a previous value (\"value one\") and operator have already been pressed & stored,\r\n      // and if the previous button clicked (\"value two\") wasn't already an operator or equals button\r\n      const calcValue = this.calculate(firstValue, operator, secondValue);\r\n\r\n      // display the calculation result\r\n      this.display.textContent = calcValue;\r\n\r\n      // set \"value one\" to the calculation result\r\n      this.calculator.dataset.firstValue = calcValue;\r\n    } else {\r\n      // first value (\"value one\") does not exist yet. Save the displayed value into \"value one\" holder.\r\n      this.calculator.dataset.firstValue = displayedNum;\r\n    }\r\n\r\n    this.calculator.dataset.previousKeyType = \"operator\";\r\n    // store the operator type into the \"operator\" holder\r\n    this.calculator.dataset.operator = action;\r\n  }\r\n\r\n  // function that deals with the click of the equals (=) button\r\n  equalsInput(displayedNum, previousKeyType) {\r\n    let firstValue = this.calculator.dataset.firstValue;\r\n    const operator = this.calculator.dataset.operator;\r\n    let secondValue = displayedNum;\r\n\r\n    // check to see if first value (\"value one\") exists.\r\n    // get first value from the first value store and second value from the screen\r\n    // get operator type from the operator store\r\n\r\n    if (firstValue) {\r\n      // only perform a calculation if previous button pressed wasn't already an equals button\r\n\r\n      if (previousKeyType !== \"calculate\") {\r\n        this.display.textContent = this.calculate(\r\n          firstValue,\r\n          operator,\r\n          secondValue\r\n        );\r\n      }\r\n    }\r\n    this.calculator.dataset.previousKeyType = \"calculate\";\r\n  }\r\n\r\n  // function to perform calculation, takes two values & operator as input and returns the calculated value\r\n  calculate(n1, operator, n2) {\r\n    const firstNum = parseFloat(n1);\r\n    const secondNum = parseFloat(n2);\r\n\r\n    switch (operator) {\r\n      case \"add\":\r\n        return firstNum + secondNum;\r\n      case \"subtract\":\r\n        return firstNum - secondNum;\r\n      case \"multiply\":\r\n        return firstNum * secondNum;\r\n      case \"divide\":\r\n        return firstNum / secondNum;\r\n      default:\r\n        throw new Error(\"Invalid operator\");\r\n    }\r\n  }\r\n}\r\n","import Calculator from \"./calculator.js\";\r\n\r\nmyCalculator = new Calculator();\r\n\r\nmyCalculator.build();\r\n"]}