{"version":3,"sources":["calculator.js","index.js"],"names":["Calculator","calculator","document","querySelector","keys","display","addEventListener","e","target","matches","buttonClicked","key","action","dataset","keyContent","textContent","displayedNum","previousKeyType","numberInput","Math","abs","decimalInput","operatorInput","clearInput","clearButton","equalsInput","includes","firstValue","operator","secondValue","calcValue","calculate","n1","n2","firstNum","parseFloat","secondNum","myCalculator","build"],"mappings":"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","file":"Simple-Calculator.e31bb0bc.js","sourceRoot":"..","sourcesContent":["export default class Calculator {\r\n  constructor() {\r\n    this.calculator = document.querySelector(\".calculator\");\r\n    this.keys = this.calculator.querySelector(\".calculator__keys\");\r\n    this.display = this.calculator.querySelector(\".calculator__display\");\r\n  }\r\n\r\n  build() {\r\n    // add an event listener to the calculator element\r\n    this.keys.addEventListener(\"click\", (e) => {\r\n      if (e.target.matches(\"button\")) {\r\n        // a calculator button was clicked. Perform action\r\n        this.buttonClicked(e.target);\r\n      }\r\n    });\r\n  }\r\n\r\n  buttonClicked(target) {\r\n    // get the button clicked\r\n    const key = target;\r\n\r\n    // get the data-action value of the button (if there is one: clear / divide / multiply / subtract / add / calculate)\r\n    const action = key.dataset.action;\r\n\r\n    // get the value of the button clicked\r\n    const keyContent = key.textContent;\r\n\r\n    // get the value of the display element\r\n    const displayedNum = this.display.textContent;\r\n\r\n    // get the type of the previous button clicked\r\n    const previousKeyType = this.calculator.dataset.previousKeyType;\r\n\r\n    // perform action if button clicked is a numeral 0 - 9\r\n    if (!action) {\r\n      this.numberInput(keyContent, displayedNum, previousKeyType);\r\n    }\r\n\r\n    // perform action negative / positive toggle if clicked\r\n    if (action === \"negative\") {\r\n      // if displayed number is negative, change to positive\r\n      if (displayedNum < 0) {\r\n        this.display.textContent = Math.abs(displayedNum);\r\n      } else {\r\n        // if displayed number is positive, change to negative\r\n        this.display.textContent = -Math.abs(displayedNum);\r\n      }\r\n    }\r\n\r\n    // change number to percentage if percentage button is clicked\r\n    if (action === \"percentage\") {\r\n      this.display.textContent = displayedNum * 0.01;\r\n    }\r\n\r\n    // perform action if button clicked is a decimal point\r\n    if (action === \"decimal\") {\r\n      this.decimalInput(displayedNum, previousKeyType);\r\n    }\r\n\r\n    // perform action if button clicked is an operator (plus / minus / multiply / divide)\r\n    if (\r\n      action === \"add\" ||\r\n      action === \"subtract\" ||\r\n      action === \"multiply\" ||\r\n      action === \"divide\"\r\n    ) {\r\n      this.operatorInput(displayedNum, previousKeyType, action);\r\n    }\r\n\r\n    // perform action if button clicked is clear\r\n    if (action === \"clear\") {\r\n      this.clearInput(key);\r\n    }\r\n\r\n    // if button clicked was not clear, change \"AC\" to \"CE\" (\"clear all to clear current\")\r\n    if (action !== \"clear\") {\r\n      const clearButton = this.calculator.querySelector(\"[data-action=clear]\");\r\n      clearButton.textContent = \"CE\";\r\n    }\r\n\r\n    // perform calculation if button clicked is equals\r\n    if (action === \"calculate\") {\r\n      this.equalsInput(displayedNum, previousKeyType);\r\n    }\r\n  }\r\n\r\n  // function that deals with the click of a number button\r\n  numberInput(keyContent, displayedNum, previousKeyType) {\r\n    if (\r\n      displayedNum === \"0\" ||\r\n      previousKeyType === \"operator\" ||\r\n      previousKeyType === \"calculate\"\r\n    ) {\r\n      // display button value directly on screen if it is the first number (i.e. display is zero)\r\n      // or the previous button clicked was an operator or equals\r\n      this.display.textContent = keyContent;\r\n    } else {\r\n      // concatenate the button value onto the displayed number string if previous button clicked was also a number\r\n      this.display.textContent = displayedNum + keyContent;\r\n    }\r\n    this.calculator.dataset.previousKeyType = \"number\";\r\n  }\r\n\r\n  // function that deals with the click of the decimal button\r\n  decimalInput(displayedNum, previousKeyType) {\r\n    if (!displayedNum.includes(\".\")) {\r\n      // only add a decimal point to the display string if it hasn't been added already\r\n      this.display.textContent = displayedNum + \".\";\r\n    } else if (\r\n      previousKeyType === \"operator\" ||\r\n      previousKeyType === \"calculate\"\r\n    ) {\r\n      // display \"0.\" if the previous button clicked wasn't a number (e.g. operator button)\r\n      this.display.textContent = \"0.\";\r\n    }\r\n    this.calculator.dataset.previousKeyType = \"decimal\";\r\n  }\r\n\r\n  // function that deals with the click of an operator button (+/-/x/รท).\r\n  operatorInput(displayedNum, previousKeyType, action) {\r\n    const firstValue = this.calculator.dataset.firstValue;\r\n    const operator = this.calculator.dataset.operator;\r\n    const secondValue = displayedNum;\r\n\r\n    if (\r\n      firstValue &&\r\n      operator &&\r\n      previousKeyType !== \"operator\" &&\r\n      previousKeyType !== \"calculate\"\r\n    ) {\r\n      // perform a calculation if a previous value (\"value one\") and operator have already been pressed & stored,\r\n      // and if the previous button clicked (\"value two\") wasn't already an operator or equals button\r\n      const calcValue = this.calculate(firstValue, operator, secondValue);\r\n\r\n      // display the calculation result\r\n      this.display.textContent = calcValue;\r\n\r\n      // set \"value one\" to the calculation result\r\n      this.calculator.dataset.firstValue = calcValue;\r\n    } else {\r\n      // first value (\"value one\") does not exist yet. Save the displayed value into \"value one\" holder.\r\n      this.calculator.dataset.firstValue = displayedNum;\r\n    }\r\n\r\n    this.calculator.dataset.previousKeyType = \"operator\";\r\n    // store the operator type into the \"operator\" holder\r\n    this.calculator.dataset.operator = action;\r\n  }\r\n\r\n  // function that deals with the click of the clear (AC / CE) button\r\n  clearInput(key) {\r\n    if (key.textContent === \"AC\") {\r\n      // \"AC\" was clicked, clear all stored values\r\n      this.calculator.dataset.firstValue = \"\";\r\n      this.calculator.dataset.operator = \"\";\r\n      this.calculator.dataset.previousKeyType = \"\";\r\n    } else {\r\n      // change \"CE\" (clear current) to \"AC\" (clear all stored)\r\n      key.textContent = \"AC\";\r\n    }\r\n    // clear the current display (\"CE\")\r\n    this.display.textContent = 0;\r\n    this.calculator.dataset.previousKeyType = \"clear\";\r\n  }\r\n\r\n  // function that deals with the click of the equals (=) button\r\n  equalsInput(displayedNum, previousKeyType) {\r\n    let firstValue = this.calculator.dataset.firstValue;\r\n    const operator = this.calculator.dataset.operator;\r\n    let secondValue = displayedNum;\r\n\r\n    // check to see if first value (\"value one\") exists.\r\n    // get first value from the first value store and second value from the screen\r\n    // get operator type from the operator store\r\n\r\n    if (firstValue) {\r\n      // only perform a calculation if previous button pressed wasn't already an equals button\r\n\r\n      if (previousKeyType !== \"calculate\") {\r\n        this.display.textContent = this.calculate(\r\n          firstValue,\r\n          operator,\r\n          secondValue\r\n        );\r\n      }\r\n    }\r\n    this.calculator.dataset.previousKeyType = \"calculate\";\r\n  }\r\n\r\n  // function to perform calculation, takes two values & operator as input and returns the calculated value\r\n  calculate(n1, operator, n2) {\r\n    const firstNum = parseFloat(n1);\r\n    const secondNum = parseFloat(n2);\r\n\r\n    switch (operator) {\r\n      case \"add\":\r\n        return firstNum + secondNum;\r\n      case \"subtract\":\r\n        return firstNum - secondNum;\r\n      case \"multiply\":\r\n        return firstNum * secondNum;\r\n      case \"divide\":\r\n        return firstNum / secondNum;\r\n      default:\r\n      // throw new Error(\"Invalid operator\");\r\n    }\r\n  }\r\n}\r\n","import Calculator from \"./calculator.js\";\r\n\r\nlet myCalculator = new Calculator();\r\n\r\nmyCalculator.build();\r\n"]}